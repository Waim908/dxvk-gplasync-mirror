name: Download and Release

on:
  workflow_dispatch:

jobs:
  Download:
    runs-on: ubuntu-latest
    steps:
      - name: check out
        uses: actions/checkout@v4
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.

      - name: clone and process
        id: dxvkVer
        run: |
          # echo "$(pwd)"
          cd /tmp

          needVer=()
          git clone https://gitlab.com/Ph42oN/dxvk-gplasync.git 
          tar -I 'xz -T$(nproc)' -cvf /tmp/source-code.tar.xz dxvk-gplasync
          cd dxvk-gplasync/
          releasesVer=($(ls releases))
          
          # 修复的版本比较逻辑
          for current_ver in "${releasesVer[@]}"; do
            found=false
            for existing_ver in "${allVersion[@]}"; do
              if [[ "$existing_ver" == "$current_ver" ]]; then
                found=true
                echo "找到 $current_ver"
                break
              fi
            done
            if ! $found; then
              echo "未找到 $current_ver"
              needVer+=("$current_ver")
            fi
          done
          
          # 检查是否有新版本需要处理
          if [ ${#needVer[@]} -eq 0 ]; then
            echo "没有新版本需要发布"
            echo "version=none" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          cd releases
          echo "需要发布的版本: ${needVer[@]}"
          echo "version=${needVer[*]}" >> $GITHUB_OUTPUT
          
          # 复制文件到临时目录
          mkdir -p /tmp/releases/
          for ver in "${needVer[@]}"; do
            if [ -d "$ver" ]; then
              cp -r "$ver" /tmp/releases/
            elif [ -f "$ver" ]; then
              cp "$ver" /tmp/releases/
            else
              echo "警告: $ver 不是文件或目录"
            fi
          done

      - name: update version file and push
        if: steps.dxvkVer.outputs.version != 'none'
        run: |
          # 读取当前版本
          . ALL_VERSION.sh
          echo "当前版本: ${allVersion[@]}"
          
          # 获取新版本
          new_versions=(${{ steps.dxvkVer.outputs.version }})
          echo "新版本: ${new_versions[@]}"
          
          # 合并版本数组（去重）
          for new_ver in "${new_versions[@]}"; do
            if [[ ! " ${allVersion[@]} " =~ " $new_ver " ]]; then
              allVersion+=("$new_ver")
            fi
          done
          
          # 写入新的版本文件
          cd /home/runner/work/dxvk-gplasync-mirror/dxvk-gplasync-mirror
          echo "allVersion=(${allVersion[@]})" > ALL_VERSION.sh
          echo "更新后的版本: ${allVersion[@]}"
    
      - name: Commit and Push
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -a -m "update ${{ steps.dxvkVer.outputs.version }}"
          git push

      - name: create release
        if: steps.dxvkVer.outputs.version != 'none'
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.dxvkVer.outputs.version }}
          draft: false
          prerelease: false
          tag_name: ${{ steps.dxvkVer.outputs.version }}
          body: |
            ${{ steps.dxvkVer.outputs.version }}
          files: |
            /tmp/releases/*
            /tmp/source-code.tar.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}